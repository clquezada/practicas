# simmr
library(simmr)
library(dplyr)
library(readxl)
library(tRophicPosition)

TPtoSimmr<-function(df= "Bilagay_for_tRophicPosition.csv",
                    filtro1="MEC", #STUDY
                    filtro2="Coquimbo", #LOCATION
                    filtro3=NULL , #SPP
                    filtro4= NULL,#NS
                    base1= "Bilagay",
                    base2="Pelagic_BL",
                    base3="Benthic_BL",
                    correction_meansCb2=0,
                    correction_meansNb2=0,
                    correction_sdCb2=0,
                    correction_sdNb2=0,
                    correction_meansCb3=0,
                    correction_meansNb3=0,
                    correction_sdCb3=0,
                    correction_sdNb3=0
                    
  
    
                  )
{
  ruta=system.file("extdata", df, 
              package = "tRophicPosition")
  datos<-read.csv(ruta)
  
  #filtro 1
  
  if (!is.null(filtro1)) { 
    
     
    
    if(any(datos$Study==filtro1))
    {
      datos<-subset(datos,Study==filtro1) 
    }
    else
    {
      stop("filtro 1 no existe en el dataframe")
      return (NULL)
      
      
     
    }
    
    
    
  }
  #filtro2
  if (!is.null(filtro2)) { 
    datos<-subset(datos,Location==filtro2)
    
  }
  #filtro3
  if (!is.null(filtro3)) { 
    datos<-subset(datos,Spp==filtro3)
    
  }
  
  #filtro4
  if (!is.null(filtro4)) { 
    datos<-subset(datos,NS==filtro4)
    
  }
  
  #base1
  if (!is.null(base1)) { 
    b1<-subset(datos,FG==base1)
    valoresb1<-matrix(c(b1$d13C,b1$d15N),nrow=length(b1$d13C),ncol=2)   
    
    
  }
  
  #base2
  if (!is.null(base2)) { 
    b2<-subset(datos,FG==base2)
    #promedios Carbono y Nitrogeno base 2
    promvaloresb2<- c(mean(b2$d13C),mean(b2$d15N))
    #desviacion estandar Carbono y Nitrogeno base 2
    sdvaloresb2<- c(sd(b2$d13C),sd(b2$d15N))
    
    
  }
  
  #base3
  if (!is.null(base3)) { 
    b3<-subset(datos,FG==base3)
    #promedios Carbono y Nitrogeno base 3
    promvaloresb3<- c(mean(b3$d13C),mean(b3$d15N))
    #desviacion estandar Carbono y Nitrogeno base 3
    sdvaloresb3<- c(sd(b3$d13C),sd(b3$d15N))
    
    
  }
  
  #Nombres
  
  Nombres<- c(base2,base3)
  
  #sourceMeans y sourceSD
  
  sourceMeans<-matrix(c(promvaloresb2,promvaloresb3),ncol = 2,nrow = 2 )
  sourceSD<-matrix(c(sdvaloresb2,sdvaloresb3),ncol = 2,nrow = 2 )
  
  #corrections means y sd de b2 y b3 si se asigna NULL
  
  correctionsMeansb2=sapply(TDF(), mean)
  correctionsSDb2=sapply(TDF(), sd) 
  correctionsMeansb3=sapply(TDF(), mean)
  correctionsSDb3=sapply(TDF(), sd) 
  
  #corrections means y sd de b2 y b3 distinto de NULL
  
  #means
  if (!is.null(correction_meansCb2)) {
    correctionsMeansb2[2]=correction_meansCb2
  }
  
  if (!is.null(correction_meansNb2)) {
    correctionsMeansb2[1]=correction_meansNb2
  }
  
  if (!is.null(correction_meansCb3)) {
    correctionsMeansb3[2]=correction_meansCb3
  }
  
  if (!is.null(correction_meansNb3)) {
    correctionsMeansb3[1]=correction_meansNb3
  }
  #sd
  
  if (!is.null(correction_sdCb2)) {
    correctionsSDb2[2]=correction_sdCb2
  }
  
  if (!is.null(correction_sdNb2)) {
    correctionsSDb2[1]=correction_sdNb2
  }
  
  if (!is.null(correction_sdCb3)) {
    correctionsSDb3[2]=correction_sdCb3
  }
  
  if (!is.null(correction_sdNb3)) {
    correctionsSDb3[1]=correction_sdNb3
  }
  
  #por comodidad invertirmos las columnas para que queden C y N y no N Y C
  
  correctionsMeansb2=rev(correctionsMeansb2)
  correctionsSDb2=rev(correctionsSDb2)
  correctionsMeansb3=rev(correctionsMeansb3)
  correctionsSDb3=rev(correctionsSDb3)
  
  #matriz corrections
  corrections_means<-matrix(c( correctionsMeansb2, correctionsMeansb3),ncol = 2,nrow = 2 )
  corrections_sd<-matrix(c( correctionsSDb2, correctionsSDb3),ncol = 2,nrow = 2 )
  
 
  
  #Traspuesta
 sourceMeans<-t(sourceMeans)
  sourceSD<-t(sourceSD)
  corrections_means<-t(corrections_means)
  corrections_sd<-t(corrections_sd)
  
  
  
  
  
  geese_simmr = simmr_load(mixtures = valoresb1, 
                           source_names = Nombres,
                           source_means = sourceMeans, 
                           source_sds = sourceSD,
                           correction_means = corrections_means,
                           correction_sds = corrections_sd
  )
  
 

  
  
return(geese_simmr)
  
  

  
}


x<-TPtoSimmr()
x
plot(x)
